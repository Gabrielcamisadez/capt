#+title: Broken Auth
#+author: gabriel

* intro
Broken Authentication is a security vulnerability that allows attackers to gain unauthorized access due to weaknesses or misconfigurations in authentication mechanisms.

These kinds of vulnerabilities often stem from weak passwords, session management errors, easily guessable security questions, and ineffective implementation of multi-factor authentication (MFA).

[[./imgs/au.png]]

*Authentication* ->
is the process of verifying the identity of a user or system. In this process, usernames and passwords, biometric data, or other authentication methods are used to confirm that the user is who they claim to be. Authentication identifies the user and allows them to log into the system.

*Authorization* ->
is the process that determines what resources or actions an authenticated user or system is permitted to access. Authorization grants permissions regarding what kind of actions the user can perform and what data they can access.

** common causes of broken authentication
- *weak password policies*
- *session management errors*
- *default credentials*
- *misconfigured authentication mechanisms*
- *lack of MFA*

* Authentication methods
*Password-Based Authentication* ->
Password-based authentication is one of the most commonly used methods. Users log into the system using a combination of a username and password that they set during registration.


*Multif-factor authentication (MFA)* ->
Multi-factor authentication adds extra layers of security to the authentication process. It typically involves two or more authentication factors: knowledge (password), possession (phone, token), and biometric data (fingerprint, facial recognition).

*Biometric authentication* ->
Biometric authentication is based on a userâ€™s physical characteristics or behaviors. Methods include fingerprint, retina scan, facial recognition, and voice recognition.

*one-time password (OTP)* ->
One-time passwords are passwords that are valid for only one session or transaction. OTPs are sent via SMS, email, or dedicated applications.

*hardware tokens* ->
Hardware tokens provide the user with a physical device that generates a code during authentication. These devices are typically USB tokens or smart cards.

* gathering information on users
Username Enumeration is the process by which attackers gather information to identify valid usernames on a system using various techniques.

Username Enumeration is the process by which attackers gather information to identify valid usernames on a system using various techniques. These attacks exploit differences in error messages, registration forms, and password reset functions in the authentication system. Username enumeration can pose serious security risks in authentication systems and may be the starting point for more advanced attacks.

** incorrect error messages
- "The username is correct, but the password is incorrect."
- "Invalid username."
- "Account is disabled."
- "This user is not active."

** correct error messages
- "Login failed; invalid username or password."
- "Login failed; incorrect username or password."

** password reset functs
Password reset functions are a common method used by attackers to verify usernames. If a system provides a different message when a valid username is entered, attackers can use this information to identify valid usernames.

* weak cookies
Cookies are pieces of data sent by web servers to a user's browser and stored on the user's device. Cookies are commonly used to store session information, remember user preferences, and identify users across sessions.

However, improper management of cookies can allow attackers to capture session information and gain unauthorized access.

Weak cookies are cookies that lack security features or are improperly configured. These cookies can allow attackers to hijack user accounts, steal sessions, or expose user information by capturing the cookies.

** common cookie problems
*unsecure transmission* ->
Transmitting cookies over HTTP means that these cookies are sent in plaintext over the network. Attackers can intercept this network traffic and capture the cookies to gain access to session information.

*long-lived cookies* ->
Long-lived cookies mean that an attacker who captures these cookies can have extended unauthorized access to the system.

*predictable values* ->
Predictable values in cookies can allow attackers to guess the values and perform session hijacking attacks.

Example: Session IDs generated by simple algorithms or incrementing numbers.

*missing security flags* ->
Cookies can have various security flags. Missing these flags increases the risk of cookies being intercepted or exploited by attackers.

* object injection (mass assignment)
Object Injection is a security vulnerability that occurs when an application assigns data received from users directly to the properties of an object.

This type of vulnerability allows attackers to assign undesirable or malicious values to application objects. This can disrupt the application's logic, enable unauthorized access, or trigger other security vulnerabilities.

Mass Assignment is the process where data received from a user is directly assigned to many properties of an object.

 If the application does not explicitly define which fields can be assigned, attackers can exploit this to assign values to unintended fields and exploit security vulnerabilities.

** user registration form example
#+begin_src html
<form action="/register" method="POST">
  <input type="text" name="username">
  <input type="password" name="password">
  <input type="email" name="email">
  <input type="submit" value="Register">
</form>
#+end_src

On the backend, these form data might be directly assigned to a user object as follows.
: user = User(params)

An attacker can manipulate the form to include a potential data field like is_admin and send a request to the server, thereby assigning themselves administrative privileges.

** php object injection example
Consider an example application in PHP involving object injection.
#+begin_src php
class User {
    public $username;
    public $password;
    public $is_admin = false;
}

$data = $_POST['user_data'];
$user = new User();
foreach ($data as $key => $value) {
    $user->$key = $value;
}
#+end_src

An attacker can manipulate the usual username and password parameters to include the is_admin parameter. In this case, the value of $user->is_admin would be set to true, granting the attacker unauthorized access.

* execution after redirect (EAR)
Execution After Redirect (EAR) is a security vulnerability that occurs when additional code is executed after a redirection process in a web application.

This kind of vulnerability allows attackers to manipulate user data or perform unintended actions after a redirect. EAR vulnerabilities typically occur when post-redirect processes are not properly concluded or controlled.

after the login page loads, looking at http history in burp, the request to / has some security flaws at front-end source code page, exposing user data.

the exam machine send a token base64 encoded for MFA login
#+begin_src sh
POST /verification.php HTTP/1.1
Host: personpanel.hv
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:140.0) Gecko/20100101 Firefox/140.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded
Content-Length: 25
Origin: http://personpanel.hv
Connection: keep-alive
Referer: http://personpanel.hv/verification.php
Cookie: PHPSESSID=qvj70n75ev1rs6b5ci1vecp36o; token=ODc3NDUz
Upgrade-Insecure-Requests: 1
Priority: u=0, i

verification_token=ODc3ND
#+end_src


*decoded from base64 877453*
