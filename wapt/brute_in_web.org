#+title: Brute In Web applications
#+author:gabriel

* intro
Brute Force attacks are a common and straightforward yet effective type of attack encountered in cybersecurity. It involves systematically trying many different combinations to find the correct credentials or configuration settings on a target system.

[[./imgs/brute.png]]

* common types
 *Dictionary Attack* ->
  In this type of attack, attackers use commonly used password lists (dictionaries) systematically to find the correct password. For example, common passwords like "123456", "password", or "admin" are tried from the list.

   The attacker uses the list or database sequentially to guess the target's password. For example, a password attack for the username "admin" can be attempted via a URL like this.
: https://example.com/login?username=admin&password=123456


*Exhaustive Search* ->
 The attacker tries to find the correct username and password by using all possible character combinations. This method is a time-consuming type of attack.

The attacker generates and attempts different combinations of each character set. For example, starting with "a" and trying all letters, numbers, and special characters through "z".


*Credential stuffing* ->
Trying to log into different websites using credentials leaked from previous data breaches.

The attacker uses username-password combinations obtained from data breaches on other websites.

* Directory Fuzzing
Directory fuzzing, also known as directory brute-forcing, is a type of attack aimed at identifying hidden or unsecured directories in web applications.

Attackers attempt to find weaknesses in the target system by trying out guessed directory names or commonly used directory structures.

The directories found can provide insights into the content of the application or sensitive files, potentially opening opportunities for further attacks.

Attackers use dictionary files or tools containing common directory names for directory fuzzing. During the scanning process, they consecutively attempt different paths and filenames to access existing directories or files in the target application

* subdomain fuzzing
Sub-domain fuzzing is a brute-force attack technique aimed at identifying the sub-domains of a primary domain.

Attackers try different sub-domain names for the target domain and verify their existence based on the responses from DNS servers.

[[./imgs/subdomain.png]]

*ffuf* ->
: ffuf -u https://FUZZ.example.com -w /path/to/wordlist.txt -H "Host: FUZZ.example.com"

*sublist3r*  ->
: sublist3r -d example.com -o subdomains.txt

* vhost fuzzing
Vhost fuzzing is a type of attack aimed at guessing virtual host (Vhost) configurations hosted on a server and identifying unauthorized access points

Vhost fuzzing is carried out by guessing the names of the virtual spaces hosted on the main machine.

*ffuf* ->
: ffuf -u https://example.com -H "Host: FUZZ.example.com" -w /path/to/wordlist.txt

*gobuster* ->
: gobuster vhost -u https://example.com -w /path/to/wordlist.txt

* get param fuzzing
GET parameter fuzzing is a testing method aimed at identifying security vulnerabilities and unexpected behaviors in web applications by manipulating GET parameters received via the URL using random or specially crafted inputs.

GET parameter fuzzing is carried out using wordlists or custom-crafted payloads. Tools send various combinations of data to parameter points in the target URL and evaluate the server's HTTP responses.

*ffuf* ->
: ffuf -u "https://example.com/page.php?param=FUZZ" -w /path/to/wordlist.txt

*burp suit intruder* ->
Burp Suite Intruder is a powerful security testing tool that can be used for parameter fuzzing and other types of attacks in web applications.

* post param fuzzing
POST parameter fuzzing is a type of testing aimed at discovering security vulnerabilities by altering the parameters sent in POST requests with different values.

POST parameter fuzzing is typically performed using wordlists or randomly generated character combinations.

For this scenario, an example HTTP request might look like this:
#+begin_src sh
POST /login.php HTTP/1.1
Host: example.com
Content-Type: application/x-www-form-urlencoded

username=admin&password=123456
#+end_src

*ffuf* ->
: ffuf -u "https://example.com/login.php" -X POST -d "username=admin&password=FUZZ" -w /usr/share/wordlists/rockyou.txt -H "Content-Type: application/x-www-form-urlencoded
