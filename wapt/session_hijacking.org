#+title: Session Hijacking
#+author: gabriel

Session hijacking refers to gaining access to a user's account in an application without knowing the username and password.

To start this session, the server typically provides the user with a unique ID in the form of a session cookie or bearer token.

*PHP Session variable*
- PHPSESSID
- er341r3erfe3w12

*ASP.NET Session variable*
- ASP.NET_SessionId
- trsrfscxz456q2lnkm

*Java Servlet Session Variable:*
- JSESSIONID
- asvcvsaadsc123143bdfcad

*JWT (Json Web Token)*
- Authorization
- Bearer M0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwi

* Common Session Hijacking Attacks
*XSS (Cross-Site Scripting)*: XSS vulnerabilities can lead to the capture of session identifiers (sessions, tokens, JWT). These session identifiers can be sufficient to hijack user sessions.

*Session Fixation*: Session IDs should be complex enough to render them impervious to brute-force attacks. Findable session IDs can lead to session hijacking.

*Bypassing MFA (Multi-Factor Authentication):*
Multi-factor authentication requires a second (or more) authentication factor when a user logs in, such as a code sent via SMS or email.

In a Blind XSS attack, an attacker sends input containing an XSS payload to the application. This input could be something like an error message, a user comment, or any data logged by the system.

* HTTPOnly Flag and Bypass Methods
The HttpOnly cookie flag is a crucial security mechanism used in web applications. This flag ensures that a cookie can only be accessed via HTTP and prevents JavaScript from reading these cookies.

However, while no security system is foolproof, there are scenarios where the HttpOnly flag can be bypassed.
